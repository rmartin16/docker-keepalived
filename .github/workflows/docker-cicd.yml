name: Docker CI/CD

on:
  #schedule:
    #- cron: '16 4 * * WED'
    #- cron: '0,15,30,45 * * * *'
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rmartin16/keepalived
  BUILD_TARGETS: linux/amd64,linux/386,linux/arm64/v8,linux/arm/v7,linux/arm/v6
  FORCE_PUBLISH: false

jobs:

  Tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Test
        run: make test
      - name: Build
        run: make build
      - name: Verify
        run: make dgoss

  Setup:
    runs-on: ubuntu-latest
    needs: [Tests]
    outputs:
      date: ${{ steps.set-date.outputs.date }}
      versions: ${{ steps.set-keepalived-versions.outputs.versions }}
      latest-version: ${{ steps.set-keepalived-versions.outputs.latest-version }}
    steps:
      - name: Declare Date
        id: set-date
        run: echo "date=$(date +'%Y%m%d')" >> ${GITHUB_OUTPUT}

      - name: Declare keepalived Versions
        id: set-keepalived-versions
        run: |  # find version 2.2+
          VERS=$( \
            git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/acassen/keepalived.git | \
            cut --delimiter='/' --fields=3 | \
            grep -v "\^{}" | \
            cut --delimiter='-' --fields=2 | \
            grep '^v2\.[2-9]\.\d*.' | \
            sed 's/v//g'
          )
          
          LATEST_VER=$(echo ${VERS} | rev | cut -d' ' -f1 | rev)
          echo "Latest: ${LATEST_VER}"
          echo "latest-version=${LATEST_VER}" >> ${GITHUB_OUTPUT}
          
          VERS_MATRIX_LIST=$(echo ${VERS} | sed -z 's/ /","/g;s/,$/\n/')
          VERS_MATRIX_LIST="[\"${VERS_MATRIX_LIST}\"]"
          echo ${VERS_MATRIX_LIST}
          echo "versions=${VERS_MATRIX_LIST}" >> ${GITHUB_OUTPUT}

  Publish:
    runs-on: ubuntu-latest
    needs: [Tests,Setup]
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        VERSION: ${{ fromJson(needs.Setup.outputs.versions) }}
        exclude:
          - VERSION: 2.2.0  # different build requirements
          - VERSION: 2.2.1  # different build requirements
          - VERSION: 2.2.2  # different build requirements
          - VERSION: 2.2.5  # not actually released
          - VERSION: 2.2.6  # not actually released

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: (github.event_name != 'pull_request') || (env.FORCE_PUBLISH == 'true')
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.title=keepalived
            org.opencontainers.image.description=keepalived v${{ matrix.VERSION }} (${{ needs.Setup.outputs.date }})
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=v${{ matrix.VERSION }}-${{ needs.Setup.outputs.date }}
          tags: |
            type=raw,value=v${{ matrix.VERSION }}
            type=raw,value=v${{ matrix.VERSION }}-${{ needs.Setup.outputs.date }}
            type=raw,value=latest,enable=${{ matrix.VERSION == needs.Setup.outputs.latest-version }}
            type=ref,event=pr

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ (github.event_name != 'pull_request') || (env.FORCE_PUBLISH == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.BUILD_TARGETS }}
          build-args: KEEPALIVED_VERSION=${{ matrix.VERSION }}

      - name: Verify image
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${REGISTRY}/${IMAGE_NAME}:v${{ matrix.VERSION }}-${{ needs.Setup.outputs.date }}
          docker image inspect ${REGISTRY}/${IMAGE_NAME}:v${{ matrix.VERSION }}-${{ needs.Setup.outputs.date }}

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ github.job }} job of ${{ github.repository }} failed
          body: |
            ${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} failed.
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: rmartin16+github-action@gmail.com   # comma-separated string
          from: rmartin16+github-action@gmail.com
